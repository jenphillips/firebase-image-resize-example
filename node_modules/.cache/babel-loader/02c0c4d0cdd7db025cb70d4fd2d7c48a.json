{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { reactReduxFirebase } from 'react-redux-firebase';\nimport { reduxFirestore } from 'redux-firestore';\nimport { createLogger } from 'redux-logger';\nimport DevTools from '../DevTools';\nimport rootReducer from '../reducers/rootReducer';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport { firebaseConfig } from 'config/firebaseConfig';\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore().settings({\n  timestampsInSnapshots: true\n}); // NOTE:  fileMetadataFactory can be overridden by a custom function\n// with the same signature passed to the 'options' argument in\n// firebase.uploadFiles, under the key 'metadataFactory'.\n// (See Uploader.js for example.)\n\nvar enhancers = [reduxFirestore(firebase), reactReduxFirebase(firebase, {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n  useFirestoreForStorageMeta: true,\n  enableLogging: true,\n  fileMetadataFactory: function fileMetadataFactory(uploadRes, firebase, metadata, downloadURL) {\n    var _uploadRes$metadata = uploadRes.metadata,\n        name = _uploadRes$metadata.name,\n        fullPath = _uploadRes$metadata.fullPath;\n    return {\n      name: name,\n      fullPath: fullPath,\n      downloadURL: downloadURL\n    };\n  }\n})];\n\nvar configureStore = function configureStore(preloadedState) {\n  var store = createStore(rootReducer, preloadedState, compose.apply(void 0, enhancers.concat([applyMiddleware(createLogger()), DevTools.instrument()])));\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers/rootReducer', function () {\n      store.replaceReducer(rootReducer);\n    });\n  }\n\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/Users/jenniferpierce/Code/example2/src/redux/store/configureStore.dev.js"],"names":["createStore","applyMiddleware","compose","reactReduxFirebase","reduxFirestore","createLogger","DevTools","rootReducer","firebase","firebaseConfig","initializeApp","firestore","settings","timestampsInSnapshots","enhancers","userProfile","useFirestoreForProfile","useFirestoreForStorageMeta","enableLogging","fileMetadataFactory","uploadRes","metadata","downloadURL","name","fullPath","configureStore","preloadedState","store","instrument","module","hot","accept","replaceReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP;AACA,OAAO,kBAAP;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEAD,QAAQ,CAACE,aAAT,CAAuBD,cAAvB;AACAD,QAAQ,CAACG,SAAT,GAAqBC,QAArB,CAA8B;AAACC,EAAAA,qBAAqB,EAAE;AAAxB,CAA9B,E,CAEA;AACA;AACA;AACA;;AACA,IAAMC,SAAS,GAAG,CAChBV,cAAc,CAACI,QAAD,CADE,EAEhBL,kBAAkB,CAACK,QAAD,EAAW;AAC3BO,EAAAA,WAAW,EAAE,OADc;AAE3BC,EAAAA,sBAAsB,EAAE,IAFG;AAG3BC,EAAAA,0BAA0B,EAAE,IAHD;AAI3BC,EAAAA,aAAa,EAAE,IAJY;AAK3BC,EAAAA,mBAAmB,EAAE,6BAACC,SAAD,EAAYZ,QAAZ,EAAsBa,QAAtB,EAAgCC,WAAhC,EAAgD;AAAA,8BAC1BF,SAD0B,CAC3DC,QAD2D;AAAA,QAC/CE,IAD+C,uBAC/CA,IAD+C;AAAA,QACzCC,QADyC,uBACzCA,QADyC;AAEnE,WAAO;AACLD,MAAAA,IAAI,EAAJA,IADK;AAELC,MAAAA,QAAQ,EAARA,QAFK;AAGLF,MAAAA,WAAW,EAAXA;AAHK,KAAP;AAKD;AAZ0B,CAAX,CAFF,CAAlB;;AAkBA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,cAAc,EAAI;AACvC,MAAMC,KAAK,GAAG3B,WAAW,CACvBO,WADuB,EAEvBmB,cAFuB,EAGvBxB,OAAO,MAAP,SACKY,SADL,SAEEb,eAAe,CAACI,YAAY,EAAb,CAFjB,EAGEC,QAAQ,CAACsB,UAAT,EAHF,GAHuB,CAAzB;;AAUA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,yBAAlB,EAA6C,YAAM;AACjDJ,MAAAA,KAAK,CAACK,cAAN,CAAqBzB,WAArB;AACD,KAFD;AAGD;;AAED,SAAOoB,KAAP;AACD,CAnBD;;AAqBA,eAAeF,cAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux'\nimport { reactReduxFirebase } from 'react-redux-firebase'\nimport { reduxFirestore } from 'redux-firestore'\nimport { createLogger } from 'redux-logger'\nimport DevTools from '../DevTools'\n\nimport rootReducer from '../reducers/rootReducer'\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth'\nimport 'firebase/database'\nimport 'firebase/firestore'\nimport 'firebase/storage'\nimport { firebaseConfig } from 'config/firebaseConfig'\n\nfirebase.initializeApp(firebaseConfig)\nfirebase.firestore().settings({timestampsInSnapshots: true})\n\n// NOTE:  fileMetadataFactory can be overridden by a custom function\n// with the same signature passed to the 'options' argument in\n// firebase.uploadFiles, under the key 'metadataFactory'.\n// (See Uploader.js for example.)\nconst enhancers = [\n  reduxFirestore(firebase),\n  reactReduxFirebase(firebase, {\n    userProfile: 'users',\n    useFirestoreForProfile: true,\n    useFirestoreForStorageMeta: true,\n    enableLogging: true,\n    fileMetadataFactory: (uploadRes, firebase, metadata, downloadURL) => {\n      const { metadata: { name, fullPath } } = uploadRes\n      return {\n        name,\n        fullPath,\n        downloadURL\n      }\n    }\n  }),\n]\n\nconst configureStore = preloadedState => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(\n      ...enhancers,\n      applyMiddleware(createLogger()),\n      DevTools.instrument()\n    )\n  )\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers/rootReducer', () => {\n      store.replaceReducer(rootReducer)\n    })\n  }\n\n  return store\n}\n\nexport default configureStore\n"]},"metadata":{},"sourceType":"module"}