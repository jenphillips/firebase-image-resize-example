{"ast":null,"code":"import _classCallCheck from \"/Users/jenniferpierce/Code/example2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jenniferpierce/Code/example2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jenniferpierce/Code/example2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jenniferpierce/Code/example2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jenniferpierce/Code/example2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jenniferpierce/Code/example2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jenniferpierce/Code/example2/src/pages/closet/Uploader.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport Dropzone from 'react-dropzone';\nimport uuidv4 from 'uuid/v4';\nimport classNames from 'classnames/bind';\nimport { Button, Alert } from 'react-bootstrap';\nimport styles from './uploader.module.css';\nvar cx = classNames.bind(styles);\nvar VALID_FILE_TYPES = ['image/jpeg', 'image/jpg', 'image/gif', 'image/png', 'image/webp'];\nexport var Uploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Uploader, _React$Component);\n\n  function Uploader() {\n    var _this;\n\n    _classCallCheck(this, Uploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Uploader).call(this));\n    _this.state = {\n      files: [],\n      webDragActive: false,\n      webUploaderActive: true,\n      computerUploaderActive: false,\n      alert: null,\n      alertType: null\n    };\n    _this.onDragOver = _this.onDragOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDragLeave = _this.onDragLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onComputerDrop = _this.onComputerDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onWebDrop = _this.onWebDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.uploadFile = _this.uploadFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Uploader, [{\n    key: \"uploadFile\",\n    value: function uploadFile() {\n      var _this2 = this;\n\n      if (this.props.categorySelected) {\n        this.showAlert('Uploading...', 'info'); // TODO:  Custom metadata factory can be passed in as a prop\n        // if/when need to reuse uploader elsewhere\n\n        var imageMetadataFactory = function imageMetadataFactory(uploadRes, firebase, metadata, downloadURL) {\n          var _uploadRes$metadata = uploadRes.metadata,\n              name = _uploadRes$metadata.name,\n              fullPath = _uploadRes$metadata.fullPath;\n          return {\n            name: name,\n            fullPath: fullPath,\n            downloadURL: downloadURL,\n            'userID': firebase.auth().currentUser.uid\n          };\n        }; // uploadFiles(storagePath, files, dbPath, {options})\n\n\n        return this.props.firebase.uploadFiles(this.props.uploadPath, this.state.files, this.props.uploadPath, {\n          metadataFactory: imageMetadataFactory\n        }).then(function (response) {\n          return _this2.props.onUploadSuccess(response);\n        }).catch(function (error) {\n          return _this2.props.onUploadError(error);\n        });\n      } // If category wasn't selected, don't try to submit; show an alert.\n\n\n      this.showAlert('Please select a category.', 'danger');\n    }\n  }, {\n    key: \"onComputerDrop\",\n    value: function onComputerDrop(files) {\n      this.setState({\n        files: files\n      });\n    }\n  }, {\n    key: \"onWebDrop\",\n    value: function onWebDrop(event) {\n      var _this3 = this;\n\n      // TODO:  Add validations\n      // - Only accept jpg, png\n      // - Warn users if they actually dragged an <a> tag or something else\n      event.stopPropagation();\n      event.preventDefault();\n      this.setState({\n        webDragActive: false\n      });\n      var imageURL = event.dataTransfer.getData('URL');\n      var imagePreview = document.getElementById('preview');\n      imagePreview.src = ''; // Clear image preview\n      // NOTE:  This is my personal version of cors-anywhere running on Heroku.\n      // https://github.com/Rob--W/cors-anywhere/\n      // If/when ever need to scale this, replace this with a Google Cloud function\n      // (which requires a paid plan for outbound requests).\n\n      var corsProxyURL = 'https://mighty-springs-74690.herokuapp.com/';\n      fetch(corsProxyURL + imageURL).then(function (res) {\n        if (res.ok) {\n          return res.blob();\n        }\n\n        throw new Error('Network response was not ok.');\n      }).then(function (res) {\n        if (VALID_FILE_TYPES.includes(res.type)) {\n          var fileName = uuidv4();\n          var file = new File([res], fileName, {\n            type: \"image/jpeg\"\n          }); // TODO:  Need to resize here instead of in Firebase function?\n          // resizeImage(file)\n\n          var objectURL = URL.createObjectURL(file);\n          imagePreview.src = objectURL;\n\n          _this3.clearAlert();\n\n          _this3.setState({\n            files: [file]\n          });\n        } else {\n          throw new Error('Image file must be a JPG, PNG, or GIF.  See help for details.');\n        }\n      }).catch(function (error) {\n        return _this3.showAlert(error.message, 'danger');\n      });\n    }\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.setState({\n        webDragActive: true\n      });\n    }\n  }, {\n    key: \"onDragLeave\",\n    value: function onDragLeave(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.setState({\n        webDragActive: false\n      });\n    }\n  }, {\n    key: \"onDropRejected\",\n    value: function onDropRejected(files) {\n      alert('Only .jpg and .png files are supported. Please try again.');\n    }\n  }, {\n    key: \"showAlert\",\n    value: function showAlert(message, type) {\n      this.setState({\n        alert: message,\n        alertType: type\n      });\n    }\n  }, {\n    key: \"clearAlert\",\n    value: function clearAlert() {\n      this.setState({\n        alert: null,\n        alertType: null\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.webDropzone.addEventListener('dragenter', this.onDragOver, false);\n      this.webDropzone.addEventListener('dragover', this.onDragOver, false);\n      this.webDropzone.addEventListener('dragleave', this.onDragLeave, false);\n      this.webDropzone.addEventListener('drop', this.onWebDrop, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var webDropzoneClassname = cx({\n        dropzone: true,\n        active: this.state.webDragActive\n      });\n      var webUploaderClassname = cx({\n        uploader: true,\n        active: this.state.webUploaderActive\n      });\n      var computerUploaderClassname = cx({\n        uploader: true,\n        active: this.state.computerUploaderActive\n      });\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-4 col-md-4 col-lg-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, this.state.alert && React.createElement(Alert, {\n        bsStyle: this.state.alertType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, this.state.alert)), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Upload an image\"), React.createElement(\"div\", {\n        id: \"webUploader\",\n        className: webUploaderClassname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"From the internet:\"), React.createElement(\"div\", {\n        id: \"webDropzone\",\n        className: webDropzoneClassname,\n        ref: function ref(elem) {\n          return _this4.webDropzone = elem;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Drag and drop an image from another browser window here.\")), React.createElement(\"img\", {\n        id: \"preview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"computerUploader\",\n        className: computerUploaderClassname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"From my computer:\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        className: \"dropzone\",\n        activeClassName: \"active\",\n        accept: \"image/jpeg,image/jpg,image/png\",\n        multiple: false,\n        onDrop: this.onComputerDrop,\n        onDropRejected: this.onDropRejected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Drag and drop a .JPG or .PNG file here, or click to browse.\"))))), React.createElement(\"div\", {\n        className: \"col-sm-4 col-md-4 col-lg-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.uploadFile,\n        disabled: !this.state.files.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Uploader;\n}(React.Component);\nUploader.propTypes = {\n  uploadPath: PropTypes.string.isRequired,\n  // Collection in which to store file metadata in Firestore\n  onUploadSuccess: PropTypes.func,\n  onUploadError: PropTypes.func,\n  categorySelected: PropTypes.bool // Add Garment form needs category to be selected before submission\n\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    uid: state.firebase.auth.uid\n  };\n};\n\nexport default compose(connect(mapStateToProps), firestoreConnect())(Uploader);","map":{"version":3,"sources":["/Users/jenniferpierce/Code/example2/src/pages/closet/Uploader.js"],"names":["React","PropTypes","connect","compose","firestoreConnect","Dropzone","uuidv4","classNames","Button","Alert","styles","cx","bind","VALID_FILE_TYPES","Uploader","state","files","webDragActive","webUploaderActive","computerUploaderActive","alert","alertType","onDragOver","onDragLeave","onComputerDrop","onWebDrop","uploadFile","props","categorySelected","showAlert","imageMetadataFactory","uploadRes","firebase","metadata","downloadURL","name","fullPath","auth","currentUser","uid","uploadFiles","uploadPath","metadataFactory","then","response","onUploadSuccess","catch","error","onUploadError","setState","event","stopPropagation","preventDefault","imageURL","dataTransfer","getData","imagePreview","document","getElementById","src","corsProxyURL","fetch","res","ok","blob","Error","includes","type","fileName","file","File","objectURL","URL","createObjectURL","clearAlert","message","webDropzone","addEventListener","webDropzoneClassname","dropzone","active","webUploaderClassname","uploader","computerUploaderClassname","elem","onDropRejected","length","Component","propTypes","string","isRequired","func","bool","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport Dropzone from 'react-dropzone'\nimport uuidv4 from 'uuid/v4'\nimport classNames from 'classnames/bind'\nimport { Button, Alert } from 'react-bootstrap'\n\nimport styles from './uploader.module.css'\nlet cx = classNames.bind(styles)\n\nconst VALID_FILE_TYPES = ['image/jpeg', 'image/jpg', 'image/gif', 'image/png', 'image/webp']\n\nexport class Uploader extends React.Component {\n  static propTypes = {\n    uploadPath: PropTypes.string.isRequired,  // Collection in which to store file metadata in Firestore\n    onUploadSuccess: PropTypes.func,\n    onUploadError: PropTypes.func,\n    categorySelected: PropTypes.bool // Add Garment form needs category to be selected before submission\n  }\n\n  constructor() {\n    super()\n\n    this.state = {\n      files: [],\n      webDragActive: false,\n      webUploaderActive: true,\n      computerUploaderActive: false,\n      alert: null,\n      alertType: null\n    }\n\n    this.onDragOver = this.onDragOver.bind(this)\n    this.onDragLeave = this.onDragLeave.bind(this)\n    this.onComputerDrop = this.onComputerDrop.bind(this)\n    this.onWebDrop = this.onWebDrop.bind(this)\n    this.uploadFile = this.uploadFile.bind(this)\n  }\n\n  uploadFile () {\n    if (this.props.categorySelected) {\n      this.showAlert('Uploading...', 'info')\n      // TODO:  Custom metadata factory can be passed in as a prop\n      // if/when need to reuse uploader elsewhere\n      let imageMetadataFactory = (uploadRes, firebase, metadata, downloadURL) => {\n        const { metadata: { name, fullPath } } = uploadRes\n        return {\n          name,\n          fullPath,\n          downloadURL,\n          'userID': firebase.auth().currentUser.uid\n        }\n      }\n\n      // uploadFiles(storagePath, files, dbPath, {options})\n      return this.props.firebase.uploadFiles(\n        this.props.uploadPath,\n        this.state.files,\n        this.props.uploadPath,\n        {metadataFactory: imageMetadataFactory}\n      )\n        .then(response => this.props.onUploadSuccess(response))\n        .catch(error => this.props.onUploadError(error))\n    }\n    // If category wasn't selected, don't try to submit; show an alert.\n    this.showAlert('Please select a category.', 'danger')\n  }\n\n  onComputerDrop (files) {\n    this.setState({files: files})\n  }\n\n  onWebDrop (event) {\n    // TODO:  Add validations\n    // - Only accept jpg, png\n    // - Warn users if they actually dragged an <a> tag or something else\n    event.stopPropagation()\n    event.preventDefault()\n    this.setState({webDragActive: false})\n\n    const imageURL = event.dataTransfer.getData('URL')\n    const imagePreview = document.getElementById('preview');\n\n    imagePreview.src = ''  // Clear image preview\n\n    // NOTE:  This is my personal version of cors-anywhere running on Heroku.\n    // https://github.com/Rob--W/cors-anywhere/\n    // If/when ever need to scale this, replace this with a Google Cloud function\n    // (which requires a paid plan for outbound requests).\n    const corsProxyURL = 'https://mighty-springs-74690.herokuapp.com/'\n\n    fetch(corsProxyURL + imageURL)\n      .then(res => {\n        if(res.ok) {\n          return res.blob();\n        }\n        throw new Error('Network response was not ok.');\n      })\n      .then(res => {\n        if (VALID_FILE_TYPES.includes(res.type)){\n          let fileName = uuidv4()\n          let file = new File([res], fileName, {type: \"image/jpeg\"})\n\n          // TODO:  Need to resize here instead of in Firebase function?\n          // resizeImage(file)\n\n          const objectURL = URL.createObjectURL(file);\n          imagePreview.src = objectURL;\n\n          this.clearAlert()\n          this.setState({files: [file]})\n        } else {\n          throw new Error('Image file must be a JPG, PNG, or GIF.  See help for details.')\n        }\n      })\n      .catch(error => this.showAlert(error.message, 'danger'))\n  }\n\n  onDragOver (event) {\n    event.stopPropagation()\n    event.preventDefault()\n    this.setState({webDragActive: true})\n  }\n\n  onDragLeave (event) {\n    event.stopPropagation()\n    event.preventDefault()\n    this.setState({webDragActive: false})\n  }\n\n  onDropRejected (files) {\n    alert('Only .jpg and .png files are supported. Please try again.')\n  }\n\n  showAlert (message, type) {\n    this.setState({ alert: message, alertType: type })\n  }\n\n  clearAlert () {\n    this.setState({ alert: null, alertType: null })\n  }\n\n  componentDidMount () {\n    this.webDropzone.addEventListener('dragenter', this.onDragOver, false);\n    this.webDropzone.addEventListener('dragover', this.onDragOver, false);\n    this.webDropzone.addEventListener('dragleave', this.onDragLeave, false);\n    this.webDropzone.addEventListener('drop', this.onWebDrop, false);\n  }\n\n  render () {\n    let webDropzoneClassname = cx({\n      dropzone: true,\n      active: this.state.webDragActive,\n    });\n\n    let webUploaderClassname = cx({\n      uploader: true,\n      active: this.state.webUploaderActive,\n    });\n\n    let computerUploaderClassname = cx({\n      uploader: true,\n      active: this.state.computerUploaderActive,\n    });\n\n    return (\n      <div className='row'>\n        <div className='col-sm-4 col-md-4 col-lg-4'>\n          {this.state.alert && <Alert bsStyle={this.state.alertType}>\n            <p>{this.state.alert}</p>\n          </Alert>}\n\n          <h2>Upload an image</h2>\n          <div id='webUploader' className={webUploaderClassname}>\n            <h3>From the internet:</h3>\n            <div\n              id='webDropzone'\n              className={webDropzoneClassname}\n              ref={elem => this.webDropzone = elem} >\n              <p>Drag and drop an image from another browser window here.</p>\n            </div>\n\n            <img id='preview' />\n          </div>\n          <div id='computerUploader' className={computerUploaderClassname}>\n            <h3>From my computer:</h3>\n            <div>\n              <Dropzone\n                className='dropzone'\n                activeClassName='active'\n                accept=\"image/jpeg,image/jpg,image/png\"\n                multiple={false}\n                onDrop={this.onComputerDrop}\n                onDropRejected={this.onDropRejected}>\n                <p>Drag and drop a .JPG or .PNG file here, or click to browse.</p>\n                </Dropzone>\n            </div>\n          </div>\n        </div>\n        <div className='col-sm-4 col-md-4 col-lg-4'>\n          <Button\n            onClick={this.uploadFile}\n            disabled={!this.state.files.length}>\n            Submit\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  uid: state.firebase.auth.uid,\n})\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect()\n)(Uploader)\n"]},"metadata":{},"sourceType":"module"}