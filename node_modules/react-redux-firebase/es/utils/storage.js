'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var getDownloadURLFromUploadTaskSnapshot = function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(uploadTaskSnapshot) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(uploadTaskSnapshot.downloadURLs && uploadTaskSnapshot.downloadURLs[0])) {
              _context.next = 4;
              break;
            }

            return _context.abrupt('return', uploadTaskSnapshot.downloadURLs[0]);

          case 4:
            if (!(uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function')) {
              _context.next = 6;
              break;
            }

            return _context.abrupt('return', uploadTaskSnapshot.ref.getDownloadURL());

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getDownloadURLFromUploadTaskSnapshot(_x) {
    return _ref3.apply(this, arguments);
  };
}();

exports.deleteFile = deleteFile;
exports.writeMetadataToDb = writeMetadataToDb;
exports.uploadFileWithProgress = uploadFileWithProgress;

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,
    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;
function deleteFile(firebase, _ref) {
  var path = _ref.path,
      dbPath = _ref.dbPath;

  return firebase.storage().ref(path).delete().then(function () {
    if (!dbPath || !firebase.database && !firebase.firestore) {
      return { path: path };
    }

    var metaDeletePromise = function metaDeletePromise() {
      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();
    };

    return metaDeletePromise().then(function () {
      return { path: path, dbPath: dbPath };
    });
  });
}

function createUploadMetaResponseHandler(_ref2) {
  var fileData = _ref2.fileData,
      firebase = _ref2.firebase,
      uploadTaskSnapshot = _ref2.uploadTaskSnapshot,
      downloadURL = _ref2.downloadURL;

  return function uploadResultFromSnap(metaDataSnapshot) {
    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;

    var result = {
      snapshot: metaDataSnapshot,
      key: metaDataSnapshot.key || metaDataSnapshot.id,
      File: fileData,
      metaDataSnapshot: metaDataSnapshot,
      uploadTaskSnapshot: uploadTaskSnapshot,

      uploadTaskSnaphot: uploadTaskSnapshot,
      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP
    };

    if (metaDataSnapshot.id) {
      result.id = metaDataSnapshot.id;
    }

    if (downloadURL) {
      result.downloadURL = downloadURL;
    }
    return result;
  };
}

function writeMetadataToDb(_ref4) {
  var firebase = _ref4.firebase,
      uploadTaskSnapshot = _ref4.uploadTaskSnapshot,
      dbPath = _ref4.dbPath,
      options = _ref4.options;
  var _firebase$_$config = firebase._.config,
      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,
      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;
  var metadataFactory = options.metadataFactory;

  var metaFactoryFunction = metadataFactory || fileMetadataFactory;

  return getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot).then(function (downloadURL) {
    var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata, downloadURL) : uploadTaskSnapshot.metadata;

    var resultFromSnap = createUploadMetaResponseHandler({
      fileData: fileData,
      firebase: firebase,
      uploadTaskSnapshot: uploadTaskSnapshot,
      downloadURL: downloadURL
    });

    var metaSetPromise = function metaSetPromise(fileData) {
      return useFirestoreForStorageMeta ? firebase.firestore().collection(dbPath).add(fileData) : firebase.database().ref(dbPath).push(fileData).then(function () {
        return firebase.database().ref(dbPath);
      });
    };

    return metaSetPromise(fileData).then(resultFromSnap);
  });
}

function uploadFileWithProgress(dispatch, firebase, _ref5) {
  var path = _ref5.path,
      file = _ref5.file,
      filename = _ref5.filename,
      meta = _ref5.meta;

  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file);

  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {
    next: function next(snapshot) {
      dispatch({
        type: FILE_UPLOAD_PROGRESS,
        meta: meta,
        payload: {
          snapshot: snapshot,
          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)
        }
      });
    },
    error: function error(err) {
      dispatch({ type: FILE_UPLOAD_ERROR, meta: meta, payload: err });
      unListen();
    },
    complete: function complete() {
      unListen();
    }
  });
  return uploadEvent;
}